---

import { t, getCurrentLocaleFromAstro } from "../../i18n/index";
const locale = getCurrentLocaleFromAstro(Astro);
const navItems = [
  { text: await t("nav.home", locale), href: "/" },
  { text: await t("nav.videos", locale), href: "/videos" },
  { text: await t("nav.blog", locale), href: "/blog" },
  { text: await t("nav.about", locale), href: "/about" },
  { text: await t("nav.contact", locale), href: "/contact" },
];

const currentPath = Astro.url.pathname;
---

<!-- Desktop Navigation -->
<nav class="hidden lg:block">
  <ul class="flex items-center space-x-6">
    {
      navItems.map((item) => {
        const isActive =
          currentPath === item.href ||
          (item.href !== "/" && currentPath.startsWith(item.href));

        return (
          <li>
            <a
              href={item.href}
              class={`nav-link text-xl font-medium transition-colors hover:text-primary-600 hover:underline ${
                isActive ? "text-primary-600" : "text-stone-950"
              }`}
              aria-current={isActive ? "page" : undefined}
            >
              {item.text}
            </a>
          </li>
        );
      })
    }
  </ul>
</nav>

<!-- Mobile Menu Button -->
<button
  id="mobile-menu-button"
  class="lg:hidden p-2 text-gray-700 hover:text-primary-600 focus:outline-none transition-colors relative"
  aria-label="Toggle Menu"
  aria-expanded="false"
>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    class="h-6 w-6"
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M4 6h16M4 12h16M4 18h16"></path>
  </svg>
</button>

<!-- Mobile Menu Dropdown - Compact & Clean -->
<div
  id="mobile-menu"
  class="nav-mobile absolute top-full left-0 right-0 bg-white shadow-lg border-t border-none transform opacity-0 origin-top transition-opacity duration-300 ease-out lg:hidden z-50"
  role="menu"
  aria-labelledby="mobile-menu-button"
>
  <!-- Navigation Links in Grid -->
  <div class="px-4 py-6">
    <div class="grid grid-cols-1 gap-3">
      {
        navItems.map((item) => {
          const isActive =
            currentPath === item.href ||
            (item.href !== "/" && currentPath.startsWith(item.href));

          return (
            <a
              href={item.href}
              class={`block px-4 py-3 font-medium rounded-lg transition-colors text-center text-3xl text-stone-950 ${
                isActive
                  ? "bg-primary-50 text-primary-600 border border-primary-200"
                  : "text-gray-900 hover:text-primary-600 border border-transparent"
              }`}
              role="menuitem"
              aria-current={isActive ? "page" : undefined}
            >
              {item.text}
            </a>
          );
        })
      }
    </div>
  </div>
</div>

<style>
  #mobile-menu-button {
    cursor: pointer;
  }

  /* Mobile menu button animation */
  #mobile-menu-button:hover svg {
    transform: scale(1.1);
  }

  #mobile-menu-button svg {
    transition: transform 0.2s ease;
  }

  /* Smooth hover effects */
  #mobile-menu a {
    transition: all 0.15s ease;
  }

  /* Active state styling */
  #mobile-menu a[aria-current="page"] {
    font-weight: 600;
  }

  .nav-mobile {
    background-color: rgba(var(--color-background-gray), 1);
  }

  .nav-link {
    text-decoration: underline 1px rgba(0, 0, 0, 0);
    transition: text-decoration-color 300ms;
  }

  a:hover {
    text-decoration-color: rgba(2.86, 0.46, 0.57, 1);
  }
</style>

<script>
  // Mobile menu functionality
  document.addEventListener("DOMContentLoaded", () => {
    const mobileMenuButton = document.getElementById("mobile-menu-button")!;
    const mobileMenu = document.getElementById("mobile-menu")!;

    let isMenuOpen = false;

    // Function to toggle mobile menu
    const toggleMobileMenu = () => {
      isMenuOpen = !isMenuOpen;

      if (isMenuOpen) {
        // Show menu
        mobileMenu.classList.remove("opacity-0");
        mobileMenuButton.setAttribute("aria-expanded", "true");
      } else {
        // Hide menu
        mobileMenu.classList.add("opacity-0");
        mobileMenuButton.setAttribute("aria-expanded", "false");
      }
    };

    // Event listeners
    mobileMenuButton?.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleMobileMenu();
    });

    // Close menu when clicking outside
    document.addEventListener("click", (e) => {
      if (
        isMenuOpen &&
        !mobileMenu.contains(e.target as Node) &&
        !mobileMenuButton.contains(e.target as Node)
      ) {
        toggleMobileMenu();
      }
    });

    // Close menu when clicking a navigation link
    const navLinks = mobileMenu?.querySelectorAll('a[href^="/"]');
    navLinks?.forEach((link) => {
      link.addEventListener("click", () => {
        if (isMenuOpen) {
          setTimeout(() => toggleMobileMenu(), 100);
        }
      });
    });

    // Keyboard navigation
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && isMenuOpen) {
        toggleMobileMenu();
      }
    });

    // Handle window resize
    window.addEventListener("resize", () => {
      if (window.innerWidth >= 1024 && isMenuOpen) {
        toggleMobileMenu();
      }
    });
  });
</script>
